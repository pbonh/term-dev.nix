---
treesitter_parsers: []
treesitter_custom_parsers_default: []
# treesitter_custom_parsers_default:
#   - norg_meta
#   - norg_table
treesitter_custom_parsers: "{{ treesitter_custom_parsers_default }}"
treesitter_parsers_all: "{{ treesitter_parsers + treesitter_custom_parsers }}"
treesitter_extra_config: []
treesitter_custom_parsers_info: ""
# treesitter_custom_parsers_info: |
#   parser_configs.norg_meta = {
#       install_info = {
#           url = 'https://github.com/nvim-neorg/tree-sitter-norg-meta',
#           files = { 'src/parser.c' },
#           branch = 'main'
#       },
#   }
#   parser_configs.norg_table = {
#       install_info = {
#           url = 'https://github.com/nvim-neorg/tree-sitter-norg-table',
#           files = { 'src/parser.c' },
#           branch = 'main'
#       },
#   }
treesitter_parsers_file: "{{ '\"' + treesitter_parsers_all |join('\", \"') + '\"' }}"
treesitter_parsers_luafile: "{{ \"'\" + treesitter_parsers_all | join(\"', '\") + \"'\" }}"
gcc_devbox_exe: "{{ devbox_nix_path_default }}/gcc"
nvim_treesitter_max_file_lines: "nil"
nvim_treesitter_max_file_size: "100 * 1024"
nvim_treesitter_disable: |
  disable = function(lang, buf)
    local max_filesize = {{ nvim_treesitter_max_file_size }}
    local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
    if ok and stats and stats.size > max_filesize then
      return true
    end
  end,
treesitter_compiler_exe: "{{ gcc_devbox_exe }}"
treesitter_compiler_path_settings: |
  require('nvim-treesitter.install').compilers = {
    '{{ treesitter_compiler_exe }}',
  }
nvim_treesitter_default:
  packer: |
    use { 'nvim-treesitter/nvim-treesitter', run = ':TSUpdate' }
    use { 'nvim-treesitter/nvim-treesitter-textobjects', requires = { 'nvim-treesitter/nvim-treesitter' } }
    use { 'nvim-treesitter/nvim-treesitter-context', requires = { 'nvim-treesitter/nvim-treesitter' } }
    use { 'nvim-treesitter/nvim-treesitter-refactor', requires = { 'nvim-treesitter/nvim-treesitter' } }
    use { 'mrjones2014/nvim-ts-rainbow', requires = { 'nvim-treesitter/nvim-treesitter' } }
    use 'David-Kunz/markid'
    use {'kevinhwang91/nvim-ufo', requires = 'kevinhwang91/promise-async'}
  lazy: |
    { 'nvim-treesitter/nvim-treesitter', build = ':TSUpdate' },
    { 'nvim-treesitter/nvim-treesitter-textobjects', dependencies = { 'nvim-treesitter/nvim-treesitter' } },
    { 'nvim-treesitter/nvim-treesitter-context', dependencies = { 'nvim-treesitter/nvim-treesitter' } },
    { 'nvim-treesitter/nvim-treesitter-refactor', dependencies = { 'nvim-treesitter/nvim-treesitter' } },
    { 'mrjones2014/nvim-ts-rainbow', dependencies = { 'nvim-treesitter/nvim-treesitter' } },
    { 'David-Kunz/markid' },
    { 'kevinhwang91/nvim-ufo', dependencies = 'kevinhwang91/promise-async' },
  config: |
    {{ treesitter_compiler_path_settings }}
    local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()
    {{ treesitter_custom_parsers_info or '-- No Custom Treesitter Parsers Installed' }}
    require('nvim-treesitter.configs').setup({
      ensure_installed = { 
        'vim',
        'jsonc',
        'lua',
        'regex',
        'bash',
        'markdown',
        'markdown_inline',
        'json',
        'query',
        'toml',
        'norg',
        {{ treesitter_parsers_file or '-- No Extra Treesitter Parsers Installed' }}
      },
      -- 'yaml',
      highlight = {
        enable = true, -- false will disable the whole extension
      },
      rainbow = {
        enable = true,
        -- disable = { 'jsx', 'cpp' }, list of languages you want to disable the plugin for
        extended_mode = false, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
        max_file_lines = {{ nvim_treesitter_max_file_lines }}, -- Do not enable for files with more than n lines, int
        -- colors = {}, -- table of hex strings
        -- termcolors = {} -- table of colour name strings
      },
      incremental_selection = {
        enable = true,
        keymaps = {
          init_selection = 'gnn',
          node_incremental = 'grn',
          scope_incremental = 'grc',
          node_decremental = 'grm',
        },
      },
      indent = {
        enable = true,
      },
      textobjects = {
        select = {
          enable = true,
          lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
          keymaps = {
            -- You can use the capture groups defined in textobjects.scm
            ['af'] = '@function.outer',
            ['if'] = '@function.inner',
            ['ac'] = '@class.outer',
            ['ic'] = '@class.inner',
          },
        },
        move = {
          enable = true,
          set_jumps = true, -- whether to set jumps in the jumplist
          goto_next_start = {
            [']m'] = '@function.outer',
            [']]'] = '@class.outer',
          },
          goto_next_end = {
            [']M'] = '@function.outer',
            [']['] = '@class.outer',
          },
          goto_previous_start = {
            ['[m'] = '@function.outer',
            ['[['] = '@class.outer',
          },
          goto_previous_end = {
            ['[M'] = '@function.outer',
            ['[]'] = '@class.outer',
          },
        },
      },
      refactor = {
        highlight_definitions = {
          enable = true,
          -- Set to false if you have an `updatetime` of ~100.
          clear_on_cursor_move = false,
        },
      },
      markid = { enable = true },
      {{ treesitter_extra_config_cpp | indent(2) or '-- No Extra Treesitter Config' }}
    })
    require('treesitter-context').setup({
        enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
        max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
        trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'
        patterns = { -- Match patterns for TS nodes. These get wrapped to match at word boundaries.
            -- For all filetypes
            -- Note that setting an entry here replaces all other patterns for this entry.
            -- By setting the 'default' entry below, you can control which nodes you want to
            -- appear in the context window.
            default = {
                'class',
                'function',
                'method',
                -- 'for', -- These won't appear in the context
                -- 'while',
                -- 'if',
                -- 'switch',
                -- 'case',
            },
            -- Example for a specific filetype.
            -- If a pattern is missing, *open a PR* so everyone can benefit.
            --   rust = {
            --       'impl_item',
            --   },
        },
        exact_patterns = {
            -- Example for a specific filetype with Lua patterns
            -- Treat patterns.rust as a Lua pattern (i.e '^impl_item$' will
            -- exactly match 'impl_item' only)
            -- rust = true,
        },
        -- [!] The options below are exposed but shouldn't require your attention,
        --     you can safely ignore them.
        zindex = 20, -- The Z-index of the context window
        mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'
    })
    -- vim.opt.foldmethod = 'expr'
    -- vim.opt.foldexpr = 'nvim_treesitter#foldexpr()'
    -- local treesitter_unfold_autocmd = {}
    -- function treesitter_unfold_autocmd.nvim_create_augroups(definitions)
    --     for group_name, definition in pairs(definitions) do
    --         vim.api.nvim_command('augroup '..group_name)
    --         vim.api.nvim_command('autocmd!')
    --         for _, def in ipairs(definition) do
    --             local command = table.concat(vim.tbl_flatten{'autocmd', def}, ' ')
    --             vim.api.nvim_command(command)
    --         end
    --         vim.api.nvim_command('augroup END')
    --     end
    -- end
    -- local autoCommands = {
    --     open_folds = {
    --         { 'BufReadPost,FileReadPost', '*', 'normal zR' },
    --     }
    -- }
    -- treesitter_unfold_autocmd.nvim_create_augroups(autoCommands)
    vim.o.foldcolumn = '1' -- '0' is not bad
    vim.o.foldlevel = 99 -- Using ufo provider need a large value, feel free to decrease the value
    vim.o.foldlevelstart = 99
    vim.o.foldenable = true
    require('ufo').setup({
      provider_selector = function(bufnr, filetype, buftype)
        return {'treesitter', 'indent'}
      end
    })
  keymaps: |
    { 'zR', { n = '<Cmd>lua require(\'ufo\').openAllFolds<CR>', }, description = 'UFO: Open All Folds', },
    { 'zM', { n = '<Cmd>lua require(\'ufo\').closeAllFolds<CR>', }, description = 'UFO: Close All Folds', },
nvim_treesitter:
  lazy: |
    { 'nvim-treesitter/nvim-treesitter-textobjects', dependencies = { 'nvim-treesitter/nvim-treesitter' } },
    { 'nvim-treesitter/nvim-treesitter-context', dependencies = { 'nvim-treesitter/nvim-treesitter' } },
    { 'nvim-treesitter/nvim-treesitter-refactor', dependencies = { 'nvim-treesitter/nvim-treesitter' } },
    { 'mrjones2014/nvim-ts-rainbow', dependencies = { 'nvim-treesitter/nvim-treesitter' } },
    { 'David-Kunz/markid' },
    {
      'nvim-treesitter/nvim-treesitter',
      build = ':TSUpdate',
      config = function()
        {{ treesitter_compiler_path_settings }}
        local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()
        {{ treesitter_custom_parsers_info or '-- No Custom Treesitter Parsers Installed' }}
        require('nvim-treesitter.configs').setup({
          ensure_installed = {
            'vim',
            'jsonc',
            'lua',
            'regex',
            'bash',
            'markdown',
            'markdown_inline',
            'json',
            'query',
            'toml',
            'norg',
            'yaml',
            {{ treesitter_parsers_file or '-- No Extra Treesitter Parsers Installed' }}
          },
          sync_install = true,
          highlight = {
            enable = true, -- false will disable the whole extension
            {{ nvim_treesitter_disable | indent(8) }}
          },
          indent = {
            enable = true, -- false will disable the whole extension
            {{ nvim_treesitter_disable | indent(8) }}
          },
          rainbow = {
            enable = true,
            {{ nvim_treesitter_disable | indent(8) }}
            -- disable = { 'jsx', 'cpp' }, list of languages you want to disable the plugin for
            extended_mode = false, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
            max_file_lines = {{ nvim_treesitter_max_file_lines }}, -- Do not enable for files with more than n lines, int
            -- colors = {}, -- table of hex strings
            -- termcolors = {} -- table of colour name strings
          },
          incremental_selection = {
            enable = true,
            {{ nvim_treesitter_disable | indent(8) }}
            keymaps = {
              init_selection = 'gnn',
              node_incremental = 'grn',
              scope_incremental = 'grc',
              node_decremental = 'grm',
            },
          },
          textobjects = {
            select = {
              enable = true,
              {{ nvim_treesitter_disable | indent(10) }}
              lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
              keymaps = {
                -- You can use the capture groups defined in textobjects.scm
                ['af'] = '@function.outer',
                ['if'] = '@function.inner',
                ['ac'] = '@class.outer',
                ['ic'] = '@class.inner',
              },
            },
            move = {
              enable = true,
              {{ nvim_treesitter_disable | indent(10) }}
              set_jumps = true, -- whether to set jumps in the jumplist
              goto_next_start = {
                [']m'] = '@function.outer',
                [']]'] = '@class.outer',
              },
              goto_next_end = {
                [']M'] = '@function.outer',
                [']['] = '@class.outer',
              },
              goto_previous_start = {
                ['[m'] = '@function.outer',
                ['[['] = '@class.outer',
              },
              goto_previous_end = {
                ['[M'] = '@function.outer',
                ['[]'] = '@class.outer',
              },
            },
          },
          refactor = {
            highlight_definitions = {
              enable = true,
              {{ nvim_treesitter_disable | indent(10) }}
              -- Set to false if you have an `updatetime` of ~100.
              clear_on_cursor_move = false,
            },
          },
          markid = {
            enable = true
          },
          {{ treesitter_extra_config_cpp | indent(8) or '-- No Extra Treesitter Config' }}
        })
        require('treesitter-context').setup({
            enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
            {{ nvim_treesitter_disable | indent(10) }}
            max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
            trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'
            patterns = { -- Match patterns for TS nodes. These get wrapped to match at word boundaries.
                -- For all filetypes
                -- Note that setting an entry here replaces all other patterns for this entry.
                -- By setting the 'default' entry below, you can control which nodes you want to
                -- appear in the context window.
                default = {
                    'class',
                    'function',
                    'method',
                    -- 'for', -- These won't appear in the context
                    -- 'while',
                    -- 'if',
                    -- 'switch',
                    -- 'case',
                },
                -- Example for a specific filetype.
                -- If a pattern is missing, *open a PR* so everyone can benefit.
                --   rust = {
                --       'impl_item',
                --   },
            },
            exact_patterns = {
                -- Example for a specific filetype with Lua patterns
                -- Treat patterns.rust as a Lua pattern (i.e '^impl_item$' will
                -- exactly match 'impl_item' only)
                -- rust = true,
            },
            -- [!] The options below are exposed but shouldn't require your attention,
            --     you can safely ignore them.
            zindex = 20, -- The Z-index of the context window
            mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'
        })
        vim.o.foldcolumn = '1' -- '0' is not bad
        vim.o.foldlevel = 99 -- Using ufo provider need a large value, feel free to decrease the value
        vim.o.foldlevelstart = 99
        vim.o.foldenable = true
      end,
    },
    {
      'kevinhwang91/nvim-ufo',
      dependencies = 'kevinhwang91/promise-async',
      config = function()
        require('ufo').setup({
          provider_selector = function(bufnr, filetype, buftype)
            return {'treesitter', 'indent'}
          end
        })
      end,
    },
  config: ""
  keymaps: |
    { 'zR', { n = '<Cmd>lua require(\'ufo\').openAllFolds<CR>', }, description = 'UFO: Open All Folds', },
    { 'zM', { n = '<Cmd>lua require(\'ufo\').closeAllFolds<CR>', }, description = 'UFO: Close All Folds', },
