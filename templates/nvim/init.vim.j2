" Leader/Command Functions  ---------------------------------------------------
  nnoremap <cr> :
  let mapleader="\<Space>"
" Python Host Version
  let g:python3_host_prog="{{ nix_bin }}/nvim-python3"
" let g:loaded_node_provider=1
" let g:node_host_prog="{{ nix_bin }}/neovim-node-host"
" ALE Settings Functions  -----------------------------------------------------
  let g:ale_disable_lsp = 1
" VTE Workaround
"set guicursor=
" Plugins ---------------------------------------------------------------------
call plug#begin('{{ nvim_plugged_dir }}')
  " Direnv --------------------------------------------------------------------
  Plug 'direnv/direnv.vim'
  " Quickfix ------------------------------------------------------------------
  Plug 'kevinhwang91/nvim-bqf'
  " Treesitter ----------------------------------------------------------------
  Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
  " Motion/Text Objects -------------------------------------------------------
  " Plug 'machakann/vim-sandwich'
  Plug 'tpope/vim-surround'
  Plug 'wellle/targets.vim'
  Plug 'ggandor/lightspeed.nvim'
" Plug 'justinmk/vim-sneak'
" Plug 'phaazon/hop.nvim'
  " Theme ---------------------------------------------------------------------
  Plug 'morhetz/gruvbox'
  " Needed Before Devicons ----------------------------------------------------
  Plug 'mhinz/vim-startify'
  Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
  " ---------------------------------------------------------------------------
  Plug 'ryanoasis/vim-devicons'
  " ---------------------------------------------------------------------------
" Plug 'beauwilliams/focus.nvim'
  Plug 'gelguy/wilder.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'rbgrouleff/bclose.vim'
  Plug 'skyuplam/broot.nvim'
  Plug 'kevinhwang91/rnvimr'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-neorg/neorg'
  Plug 'sbdchd/neoformat'
  Plug 'dense-analysis/ale'
  Plug 'tpope/vim-dispatch' | Plug 'radenling/vim-dispatch-neovim'
  Plug 'jeffkreeftmeijer/vim-numbertoggle'
  Plug 'juneedahamed/vc.vim'
  Plug 'haya14busa/is.vim'
  Plug 'caenrique/nvim-maximize-window-toggle'
  Plug 'jmckiern/vim-venter'
  Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
  Plug 'skywind3000/asynctasks.vim'
  Plug 'skywind3000/asyncrun.vim'
  Plug 'skywind3000/asyncrun.extra'
  Plug 'mhinz/vim-signify'
  " Split UI ------------------------------------------------------------------
" Plug 'dstein64/vim-win'
  " Selection UI --------------------------------------------------------------
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'nvim-telescope/telescope-project.nvim'
  Plug 'nvim-telescope/telescope-ui-select.nvim'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'voldikss/fzf-floaterm'
  Plug 'voldikss/vim-floaterm'
  Plug 'akinsho/toggleterm.nvim'
  Plug 'ibhagwan/fzf-lua'
  Plug 'vijaymarupudi/nvim-fzf'
  Plug 'kyazdani42/nvim-web-devicons'
  " Session Management --------------------------------------------------------
" Plug 'rmagatti/auto-session'
" Plug 'rmagatti/session-lens'
  " Syntax Highlighting -------------------------------------------------------
  Plug 'vim-scripts/bnf.vim'
  Plug 'vim-scripts/ebnf.vim'
  " Unit Testing --------------------------------------------------------------
  " Nix -----------------------------------------------------------------------
  Plug 'LnL7/vim-nix'
  " Ansible -------------------------------------------------------------------
  Plug 'pearofducks/ansible-vim'
  " Language Server Protocol --------------------------------------------------
  Plug 'neoclide/coc.nvim', {'do': '{{ nix_bin }}/yarn install --frozen-lockfile'}
  Plug 'liuchengxu/vista.vim'
  Plug 'antoinemadec/coc-fzf'
  " DAP(Debug Adapter Protocol) Debugger --------------------------------------
  Plug 'mfussenegger/nvim-dap'
  Plug 'rcarriga/nvim-dap-ui'
  " Language Server Protocol Providers ----------------------------------------
{{ lsp_provider_neovim_plugins_file or "\" No LSP Providers Installed" }}
  " Language Server Protocol Providers(End) -----------------------------------
  " Language Plugins ----------------------------------------------------------
{{ language_neovim_plugins_file or "\" No Language Plugins Installed" }}
  " Language Plugins(End) -----------------------------------------------------
call plug#end()
" Plugins(End) ----------------------------------------------------------------

" General ---------------------------------------------------------------------
" System Settings  ------------------------------------------------------------
  set hidden
  set noshowmode
  set noswapfile
  set wildmenu
" set laststatus=2
" set showtabline=2
" set wildmode=longest:full,full
  set nobackup
  set nowritebackup
" set timeoutlen=1000 ttimeoutlen=100
  set nomodeline
" Display  --------------------------------------------------------------------
" syn match   myTodo   contained   "\<\(TODO\|FIXME\):"
" hi def link myTodo Todo
" Tabs
" set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
  set tabstop=4 softtabstop=4 expandtab shiftwidth=4 smarttab
" Show `▸▸` for tabs: 	, `·` for tailing whitespace:
  set list listchars=tab:▸▸,trail:·
" Enable mouse mode
  set mouse=a
  set nowrap           " do not automatically wrap on load
  set formatoptions-=t " do not automatically wrap text when typing
" Use the system clipboard
  set clipboard+=unnamedplus
" Use a color column on the 120-character mark
  set colorcolumn=120
" Text Width
  set textwidth=100
  colorscheme gruvbox
" Search  ---------------------------------------------------------------------
  set ignorecase smartcase
" Cursor  ---------------------------------------------------------------------
  set cursorline
" Line Numbers  ---------------------------------------------------------------
  set number relativenumber
  command! ToggleHybridLineNumbers :set number! relativenumber!
" augroup numbertoggle
"   autocmd!
"   autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
"   autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
" augroup END
" Terminal Settings  ----------------------------------------------------------
  set shell={{ nvim_shell }}
  set termguicolors
" if $TERM =~ '^\(rxvt\|screen\|interix\|putty\)\(-.*\)\?$'
"     set notermguicolors
" elseif $TERM =~ '^\(tmux\|iterm\|vte\|gnome\)\(-.*\)\?$'
"     set termguicolors
" elseif $TERM =~ '^\(xterm\)\(-.*\)\?$'
"     if $XTERM_VERSION != ''
"         set termguicolors
"     elseif $KONSOLE_PROFILE_NAME != ''
"         set termguicolors
"     elseif $VTE_VERSION != ''
"         set termguicolors
"     else
"         set notermguicolors
"     endif
" endif
" Allow hitting $Command$ to switch to normal mode
  tnoremap <C-]> <C-\><C-n>
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-w>h <C-\><C-n><C-w><C-h>
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-w>j <C-\><C-n><C-w><C-j>
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-w>k <C-\><C-n><C-w><C-k>
  tnoremap <C-l> <C-\><C-n><C-w>l
  tnoremap <C-w>l <C-\><C-n><C-w><C-l>
" au BufEnter 'term://*' startinsert
  augroup TerminalStuff
      au!
      autocmd TermOpen * setlocal nonumber norelativenumber
      autocmd BufWinEnter,WinEnter term://* startinsert
  augroup END
" let g:neoterm_autoinsert=1
" Split Settings  -------------------------------------------------------------
  set splitright
  set splitbelow
" map <BS> <C-w>h
" map <C-h> <BS>
  nmap <Leader>w [vim-win]
  xmap <Leader>w [vim-win]
" let g:win_ext_command_map = {"\<cr>": 'Win#exit'}
" nnoremap [vim-win]j :Win<cr>sj
" xnoremap [vim-win]j :Win<cr>sj
" nnoremap [vim-win]k :Win<cr>sk
" xnoremap [vim-win]k :Win<cr>sk
" nnoremap [vim-win]h :Win<cr>sh
" xnoremap [vim-win]h :Win<cr>sh
" nnoremap [vim-win]l :Win<cr>sl
" xnoremap [vim-win]l :Win<cr>sl
" nnoremap <C-j> :Win<cr>j
" xnoremap <C-j> :Win<cr>j
" nnoremap <C-k> :Win<cr>k
" xnoremap <C-k> :Win<cr>k
" nnoremap <C-h> :Win<cr>h
" xnoremap <C-h> :Win<cr>h
" nnoremap <C-l> :Win<cr>l
" xnoremap <C-l> :Win<cr>l
" nnoremap <C-w>j :Win<cr>J
" xnoremap <C-w>j :Win<cr>J
" nnoremap <C-w>k :Win<cr>K
" xnoremap <C-w>k :Win<cr>K
" nnoremap <C-w>h :Win<cr>H
" xnoremap <C-w>h :Win<cr>H
" nnoremap <C-w>l :Win<cr>L
" xnoremap <C-w>l :Win<cr>L
  nnoremap <C-j> <C-w>j
  xnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  xnoremap <C-k> <C-w>k
  nnoremap <C-h> <C-w>h
  xnoremap <C-h> <C-w>h
  nnoremap <C-l> <C-w>l
  xnoremap <C-l> <C-w>l
  nnoremap <C-w>j <C-w>r
  xnoremap <C-w>j <C-w>r
  nnoremap <C-w>k <C-w>R
  xnoremap <C-w>k <C-w>R
  nnoremap <C-w>h <C-w>R
  xnoremap <C-w>h <C-w>R
  nnoremap <C-w>l <C-w>r
  xnoremap <C-w>l <C-w>r
" Misc Functions  -------------------------------------------------------------
  vnoremap J :m '>+1<CR>gv=gv
  vnoremap K :m '<-2<CR>gv=gv
  command! ReloadVimrc :source $MYVIMRC
  command! -nargs=1 SilentVimscriptCommand execute ':silent !'.<q-args> | execute ':redraw!'
" General(End) ----------------------------------------------------------------

" Plugin Settings -------------------------------------------------------------
" for f in split(glob('{{ nvim_plugin_config_dir }}/*.vimrc'), '\n')
"   exe 'source' f
" endfor
" Plugin Settings(End) --------------------------------------------------------

" Plugin Lua Settings ---------------------------------------------------------
  luafile {{ nvim_config_lua }}
" Plugin Lua Settings(End) ----------------------------------------------------

" DevIcons Settings -----------------------------------------------------------
  set encoding=utf8
" adding to vim-airline's tabline
  let g:webdevicons_enable_airline_tabline = 1
" adding to vim-airline's statusline
  let g:webdevicons_enable_airline_statusline = 1
" for vim-startify
  let entry_format = "'   ['. index .']'. repeat(' ', (3 - strlen(index)))"
  if exists('*WebDevIconsGetFileTypeSymbol')  " support for vim-devicons
    let entry_format .= ". WebDevIconsGetFileTypeSymbol(entry_path) .' '.  entry_path"
  else
    let entry_format .= '. entry_path'
  endif
" DevIcons Settings(End) ------------------------------------------------------

" COC.nvim Settings -----------------------------------------------------------
  let g:coc_node_path = '{{ nix_bin }}/node'
  set cmdheight=2
  set updatetime=100
  set shortmess+=c
  set signcolumn=yes
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nnoremap <silent> g/  :CocFzfList outline<cr>
  nnoremap <silent> gS :CocFzfList symbols<cr>
  nmap <Leader>rn <Plug>(coc-rename)
  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end
  xmap <Leader>a  <Plug>(coc-codeaction-selected)
  nmap <Leader>a  <Plug>(coc-codeaction-selected)
  nmap <Leader>ac  <Plug>(coc-codeaction)
  nmap <Leader>qf  <Plug>(coc-fix-current)
  xmap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap if <Plug>(coc-funcobj-i)
  omap af <Plug>(coc-funcobj-a)
  nmap <silent> <TAB> <Plug>(coc-range-select)
  xmap <silent> <TAB> <Plug>(coc-range-select)
  command! -nargs=0 Format :call CocAction('format')
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" COC.nvim Settings(End) ------------------------------------------------------

" Wilder.nvim Settings --------------------------------------------------------
  call wilder#setup({
        \ 'modes': [':', '/', '?'],
        \ 'next_key': '<Tab>',
        \ 'previous_key': '<S-Tab>',
        \ 'accept_key': '<Down>',
        \ 'reject_key': '<Up>',
        \ })
" call wilder#set_option('pipeline', [
"       \   wilder#branch(
"       \     wilder#python_file_finder_pipeline({
"       \       'file_command': ['{{ nix_bin }}/fd', '-tf'],
"       \       'dir_command': ['{{ nix_bin }}/fd', '-td'],
"       \       'filters': ['fuzzy_filter', 'difflib_sorter'],
"       \     }),
"       \     wilder#cmdline_pipeline({
"       \       'language': 'python',
"       \       'fuzzy': 1,
"       \     }),
"       \     wilder#python_search_pipeline(),
"       \   ),
"       \ ])
" call wilder#set_option('renderer', wilder#wildmenu_renderer(
"       \ wilder#wildmenu_airline_theme({
"       \   'highlights': {},
"       \   'highlighter': wilder#basic_highlighter(),
"       \   'separator': ' · ',
"       \ })))
" call wilder#set_option('renderer', wilder#popupmenu_renderer(wilder#popupmenu_border_theme({
"       \ 'highlights': {
"       \   'border': 'Normal',
"       \ },
"       \ 'border': 'rounded',
"       \ })))
" call wilder#set_option('renderer', wilder#popupmenu_renderer({
"       \ 'highlighter': wilder#basic_highlighter(),
"       \ 'left': [
"       \   ' ', wilder#popupmenu_devicons(),
"       \ ],
"       \ 'right': [
"       \   ' ', wilder#popupmenu_scrollbar(),
"       \ ],
"       \ }))
" call wilder#set_option('renderer', wilder#popupmenu_renderer({
"       \ 'highlighter': [
"       \   wilder#lua_pcre2_highlighter(),
"       \   wilder#lua_fzy_highlighter(),
"       \ ],
"       \ 'highlights': {
"       \   'accent': wilder#make_hl('WilderAccent', 'Pmenu', [{}, {}, {'foreground': '#f4468f'}]),
"       \ },
"       \ }))
  call wilder#set_option('pipeline', [
        \   wilder#branch(
        \     wilder#python_file_finder_pipeline({
        \       'file_command': {_, arg -> stridx(arg, '.') != -1 ? ['{{ nix_bin }}/fd', '-tf', '-H'] : ['{{ nix_bin }}/fd', '-tf']},
        \       'dir_command': ['{{ nix_bin }}/fd', '-td'],
        \       'filters': ['fuzzy_filter', 'difflib_sorter'],
        \     }),
        \     wilder#substitute_pipeline({
        \       'pipeline': wilder#python_search_pipeline({
        \         'skip_cmdtype_check': 1,
        \         'pattern': wilder#python_fuzzy_pattern({
        \           'start_at_boundary': 0,
        \         }),
        \       }),
        \     }),
        \     wilder#cmdline_pipeline({
        \       'fuzzy': 1,
        \       'fuzzy_filter': wilder#vim_fuzzy_filter(),
        \     }),
        \     [
        \       wilder#check({_, x -> empty(x)}),
        \       wilder#history(),
        \     ],
        \     wilder#python_search_pipeline({
        \       'pattern': wilder#python_fuzzy_pattern({
        \         'start_at_boundary': 0,
        \       }),
        \     }),
        \   ),
        \ ])
  let s:highlighters = [
        \ wilder#basic_highlighter()
        \ ]
  let s:popupmenu_renderer = wilder#popupmenu_renderer(wilder#popupmenu_border_theme({
        \ 'border': 'rounded',
        \ 'empty_message': wilder#popupmenu_empty_message_with_spinner(),
        \ 'highlighter': wilder#basic_highlighter(),
        \ 'left': [
        \   ' ',
        \   wilder#popupmenu_devicons(),
        \   wilder#popupmenu_buffer_flags({
        \     'flags': ' a + ',
        \     'icons': {'+': '', 'a': '', 'h': ''},
        \   }),
        \ ],
        \ 'right': [
        \   ' ',
        \   wilder#popupmenu_scrollbar(),
        \ ],
        \ }))
  let s:wildmenu_renderer = wilder#wildmenu_renderer({
        \ 'highlighter': s:highlighters,
        \ 'separator': ' · ',
        \ 'left': [' ', wilder#wildmenu_spinner(), ' '],
        \ 'right': [' ', wilder#wildmenu_index()],
        \ })
  call wilder#set_option('renderer', wilder#renderer_mux({
        \ ':': s:popupmenu_renderer,
        \ '/': s:wildmenu_renderer,
        \ 'substitute': s:wildmenu_renderer,
        \ }))
" Wilder.nvim Settings(End) ---------------------------------------------------

" Floaterm Settings -----------------------------------------------------------
  let g:floaterm_width = 0.8
  let g:floaterm_height = 0.9
  let g:floaterm_position = 'center'
  let g:floaterm_autoclose = 1
  let g:floaterm_autoinsert = v:true
  let g:floaterm_opener = 'tabe'
  let g:floaterm_keymap_toggle = '<C-\>'
  nnoremap   <silent>   <C-s>   :FloatermNew<CR>
  nnoremap   <silent>   <C-p>   :FloatermPrev<CR>
  nnoremap   <silent>   <C-n>   :FloatermNext<CR>
  command! FloatermLazygit :FloatermNew lazygit
  command! FloatermRanger :FloatermNew ranger
  command! FloatermBroot :FloatermNew broot
  hi FloatermBorder guibg=gray guifg=orange
  hi FloatermNC guibg=gray
  nmap <Leader>s [floaterm-p]
  xmap <Leader>s [floaterm-p]
  nnoremap <silent> [floaterm-p]s :Floaterms<cr>
  nnoremap <silent> [floaterm-p]g :FloatermLazygit<CR>
  nnoremap <silent> [floaterm-p]r :FloatermRanger<CR>
  nnoremap <silent> [floaterm-p]b :FloatermBroot<CR>
  let g:fzf_floaterm_newentries = {
    \ '+lazygit' : {
      \ 'title': 'Lazygit',
      \ 'cmd': '{{ nix_bin }}/lazygit' },
    \ '+grv' : {
      \ 'title': 'GRV',
      \ 'cmd': '{{ nix_bin }}/grv' },
    \ '+zsh' : {
      \ 'title': 'Zsh Shell',
      \ 'cmd': '{{ nix_bin }}/zsh' },
    \ '+ranger' : {
      \ 'title': 'Ranger File Manager',
      \ 'cmd': '{{ nix_bin }}/ranger' },
    \ '+broot' : {
      \ 'title': 'Broot File Manager',
      \ 'cmd': '{{ nix_bin }}/broot' },
    \ '+pwsh' : {
      \ 'title': 'Powershell',
      \ 'cmd': 'pwsh' }
    \ }
" Floaterm Settings(End) ------------------------------------------------------

" Toggleterm Settings -----------------------------------------------------------
  tnoremap <silent> <C-/> :ToggleTerm<cr>
  nnoremap <silent> [floaterm-p]/ :2ToggleTerm<cr>
  nnoremap <silent> [floaterm-p]x :ToggleTerm size=20 direction=horizontal<cr>
  nnoremap <silent> [floaterm-p]v :ToggleTerm size=80 direction=vertical<cr>
" Toggleterm Settings(End) ------------------------------------------------------

" RNvimR Settings -------------------------------------------------------------
" Make Ranger replace Netrw and be the file explorer
  let g:rnvimr_enable_ex = 0

" Make Ranger to be hidden after picking a file
  let g:rnvimr_enable_picker = 1

" Disable a border for floating window
  let g:rnvimr_draw_border = 1

" Hide the files included in gitignore
  let g:rnvimr_hide_gitignore = 1

" Change the border's color
  let g:rnvimr_border_attr = {'fg': 14, 'bg': -1}

" Make Neovim wipe the buffers corresponding to the files deleted by Ranger
  let g:rnvimr_enable_bw = 1

" Add a shadow window, value is equal to 100 will disable shadow
  let g:rnvimr_shadow_winblend = 70

" Draw border with both
  let g:rnvimr_ranger_cmd = '{{ nix_bin }}/ranger'
" let g:rnvimr_ranger_cmd = '{{ nix_bin }}/ranger --cmd="set draw_borders both"'
" let g:rnvimr_ranger_cmd = g:python3_host_prog . ' ' . fnamemodify(g:python3_host_prog,':h') . '/ranger --cmd="set draw_borders both"'

" Link CursorLine into RnvimrNormal highlight in the Floating window
  highlight link RnvimrNormal CursorLine

" nnoremap <silent> <Leader>r :RnvimrToggle<CR>
" tnoremap <silent> <Leader>r <C-\><C-n>:RnvimrToggle<CR>

" Resize floating window by all preset layouts
  tnoremap <silent> <M-i> <C-\><C-n>:RnvimrResize<CR>

" Resize floating window by special preset layouts
  tnoremap <silent> <M-l> <C-\><C-n>:RnvimrResize 1,8,9,11,5<CR>

" Resize floating window by single preset layout
  tnoremap <silent> <M-y> <C-\><C-n>:RnvimrResize 6<CR>

" Map Rnvimr action
  let g:rnvimr_action = {
              \ '<C-t>': 'NvimEdit tabedit',
              \ '<C-x>': 'NvimEdit split',
              \ '<C-v>': 'NvimEdit vsplit',
              \ 'gw': 'JumpNvimCwd',
              \ 'yw': 'EmitRangerCwd'
              \ }

" Add views for Ranger to adapt the size of floating window
  let g:rnvimr_ranger_views = [
              \ {'minwidth': 90, 'ratio': []},
              \ {'minwidth': 50, 'maxwidth': 89, 'ratio': [1,1]},
              \ {'maxwidth': 49, 'ratio': [1]}
              \ ]

" Customize the initial layout
  let g:rnvimr_layout = {
              \ 'relative': 'editor',
              \ 'width': float2nr(round(0.7 * &columns)),
              \ 'height': float2nr(round(0.7 * &lines)),
              \ 'col': float2nr(round(0.15 * &columns)),
              \ 'row': float2nr(round(0.15 * &lines)),
              \ 'style': 'minimal'
              \ }

" Customize multiple preset layouts
" '{}' represents the initial layout
  let g:rnvimr_presets = [
              \ {'width': 0.600, 'height': 0.600},
              \ {},
              \ {'width': 0.800, 'height': 0.800},
              \ {'width': 0.950, 'height': 0.950},
              \ {'width': 0.500, 'height': 0.500, 'col': 0, 'row': 0},
              \ {'width': 0.500, 'height': 0.500, 'col': 0, 'row': 0.5},
              \ {'width': 0.500, 'height': 0.500, 'col': 0.5, 'row': 0},
              \ {'width': 0.500, 'height': 0.500, 'col': 0.5, 'row': 0.5},
              \ {'width': 0.500, 'height': 1.000, 'col': 0, 'row': 0},
              \ {'width': 0.500, 'height': 1.000, 'col': 0.5, 'row': 0},
              \ {'width': 1.000, 'height': 0.500, 'col': 0, 'row': 0},
              \ {'width': 1.000, 'height': 0.500, 'col': 0, 'row': 0.5}
              \ ]

" Fullscreen for initial layout
" let g:rnvimr_layout = {
"            \ 'relative': 'editor',
"            \ 'width': &columns,
"            \ 'height': &lines - 2,
"            \ 'col': 0,
"            \ 'row': 0,
"            \ 'style': 'minimal'
"            \ }
"
" Only use initial preset layout
" let g:rnvimr_presets = [{}]
" RNvimR Settings(End) --------------------------------------------------------

" Airline Settings ------------------------------------------------------------
  let g:airline_powerline_fonts=1
  let g:airline#extensions#tabline#enabled=1
" Airline Settings(End) -------------------------------------------------------

" Telescope Settings ----------------------------------------------------------
  nmap <Leader>t [telescope-p]
  xmap <Leader>t [telescope-p]
" Telescope Settings(End) -----------------------------------------------------

" Auto-Session Settings -------------------------------------------------------
" let g:auto_session_pre_restore_cmds = ["CocDisable"]
" let g:auto_session_post_restore_cmds = ["ReloadVimrc", "CocRestart"]
" nnoremap <silent> [telescope-p]s :SearchSession<CR>
" nnoremap <silent> <Leader>p :SearchSession<CR>
" Auto-Session Settings(End) --------------------------------------------------

" Treesitter/Neorg Settings ---------------------------------------------------
" Treesitter/Neorg Settings(End) ----------------------------------------------

" Neoformat Settings ----------------------------------------------------------
  let g:neoformat_enabled_shell = ['shfmt']
  let g:neoformat_enabled_yaml = ['prettier']
  let g:neoformat_enabled_json = ['prettier']
  let g:shfmt_opt="-ci"
{{ neoformat_plugin_settings or "\" No Languages Configured for Formatting" }}
" Neoformat Settings(End) -----------------------------------------------------

" FZF Settings ----------------------------------------------------------------
  set rtp+=~/.fzf
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8, 'relative': v:true } }
  let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment'] }
  let g:fzf_commands_expect = 'alt-enter'
  function! s:fzf_statusline()
    " Override statusline as you like
    highlight fzf1 ctermfg=161 ctermbg=251
    highlight fzf2 ctermfg=23 ctermbg=251
    highlight fzf3 ctermfg=237 ctermbg=251
    setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
  endfunction
  autocmd! User FzfStatusLine call <SID>fzf_statusline()

" let g:fzf_preview_use_dev_icons = 1
" let g:fzf_preview_command = '{{ nix_bin }}/bat --color=always --plain {-1}'
" let g:fzf_preview_lines_command = '{{ nix_bin }}/bat --color=always --plain --number'
" let g:fzf_preview_directory_files_command = '{{ nix_bin }}/fd --type f'
" let g:fzf_preview_filelist_command = '{{ nix_bin }}/fd --type f'
" let g:fzf_preview_grep_cmd = '{{ nix_bin }}/rg --line-number --no-heading --color=never --hidden'
" nmap <Leader>f [fzf-p]
" xmap <Leader>f [fzf-p]
" nnoremap <silent> [fzf-p]f     :<C-u>FzfPreviewProjectFilesRpc<CR>
" nnoremap <silent> [fzf-p]gf    :<C-u>FzfPreviewGitFilesRpc<CR>
" nnoremap <silent> [fzf-p]p     :<C-u>FzfPreviewFromResourcesRpc project_mru git<CR>
" nnoremap <silent> [fzf-p]gs    :<C-u>FzfPreviewGitStatusRpc<CR>
" nnoremap <silent> [fzf-p]ga    :<C-u>FzfPreviewGitActionsRpc<CR>
" nnoremap <silent> [fzf-p]b     :<C-u>FzfPreviewBuffersRpc<CR>
" nnoremap <silent> [fzf-p]B     :<C-u>FzfPreviewAllBuffersRpc<CR>
" nnoremap <silent> [fzf-p]o     :<C-u>FzfPreviewFromResourcesRpc buffer project_mru<CR>
" nnoremap <silent> [fzf-p]<C-o> :<C-u>FzfPreviewJumpsRpc<CR>
" nnoremap <silent> [fzf-p]g;    :<C-u>FzfPreviewChangesRpc<CR>
" nnoremap <silent> [fzf-p]/     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
" nnoremap <silent> [fzf-p]*     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
" nnoremap          [fzf-p]gr    :<C-u>FzfPreviewProjectGrepRpc<Space>
" xnoremap          [fzf-p]gr    "sy:FzfPreviewProjectGrepRpc<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
" nnoremap <silent> [fzf-p]t     :<C-u>FzfPreviewBufferTagsRpc<CR>
" nnoremap <silent> [fzf-p]q     :<C-u>FzfPreviewQuickFixRpc<CR>
" nnoremap <silent> [fzf-p]l     :<C-u>FzfPreviewLocationListRpc<CR>
" augroup fzf_preview
"   autocmd!
"   autocmd User fzf_preview#rpc#initialized call s:fzf_preview_settings() " fzf_preview#remote#initialized or fzf_preview#coc#initialized
" augroup END
" function! s:fzf_preview_settings() abort
"   let g:fzf_preview_command = 'COLORTERM=truecolor ' . g:fzf_preview_command
"   let g:fzf_preview_grep_preview_cmd = 'COLORTERM=truecolor ' . g:fzf_preview_grep_preview_cmd
" endfunction

  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)


  function! RipgrepFzf(query, fullscreen)
    let command_fmt = '{{ nix_bin }}/rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
  endfunction
  command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
  command! -nargs=* -bang RGCWord call RipgrepFzf(expand('<cword>'), <bang>0)

  function! s:fzf_sink(what)
      let p1 = stridx(a:what, '<')
      if p1 >= 0
          let name = strpart(a:what, 0, p1)
          let name = substitute(name, '^\s*\(.\{-}\)\s*$', '\1', '')
          if name != ''
              exec "AsyncTask ". fnameescape(name)
          endif
      endif
  endfunction
  function! s:fzf_task()
      let rows = asynctasks#source(&columns * 48 / 100)
      let source = []
      for row in rows
          let name = row[0]
          let source += [name . '  ' . row[1] . '  : ' . row[2]]
      endfor
      let opts = { 'source': source, 'sink': function('s:fzf_sink'),
                  \ 'options': '+m --nth 1 --inline-info --tac' }
      if exists('g:fzf_layout')
          for key in keys(g:fzf_layout)
              let opts[key] = deepcopy(g:fzf_layout[key])
          endfor
      endif
      call fzf#run(opts)
  endfunction
  command! -nargs=0 AsyncTaskFzf call s:fzf_task()

  nmap <Leader>f [fzf-file-p]
  xmap <Leader>f [fzf-file-p]
  nmap <Leader>g [fzf-git-p]
  xmap <Leader>g [fzf-git-p]
  nnoremap <C-t> :AsyncTaskFzf<cr>
" nnoremap <C-q> :RG<cr>
" nnoremap _ :RGCWord<cr>
  nnoremap : :Commands<cr>
" nnoremap <silent> [fzf-file-p]f :Files<CR>
" nnoremap <silent> [fzf-file-p]b :Buffers<CR>
  nnoremap <silent> <C-q> <cmd>lua require('fzf-lua').live_grep()<CR>
  nnoremap <silent> _ <cmd>lua require('fzf-lua').grep_cword()<CR>
" nnoremap <silent> : <cmd>lua require('fzf-lua').commands()<CR>
  nnoremap <silent> [fzf-file-p]f <cmd>lua require('fzf-lua').files()<CR>
  nnoremap <silent> [fzf-file-p]r <cmd>lua require('fzf-lua').files({ cwd = '{{ code_checkout_path }}' })<CR>
  nnoremap <silent> [fzf-file-p]b <cmd>lua require('fzf-lua').buffers()<CR>
  nnoremap <silent> [fzf-git-p]b <cmd>lua require('fzf-lua').git_branches()<CR>
  nnoremap <silent> [fzf-git-p]c <cmd>lua require('fzf-lua').git_commits()<CR>
  nnoremap <silent> [fzf-git-p]s <cmd>lua require('fzf-lua').git_status()<CR>
" FZF Settings(End) -----------------------------------------------------------

" AsyncTasks Settings ---------------------------------------------------------
  let g:asynctasks_term_pos = 'floaterm'
" AsyncTasks Settings(End) ----------------------------------------------------

" UltiSnips Settings ----------------------------------------------------------
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<C-b>"
  let g:UltiSnipsJumpBackwardTrigger="<C-v>"

" If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit="vertical"

" Prevent UltiSnips from conflicting with mapping
  let g:UltiSnipsMappingsToIgnore = ['autocomplete']
" UltiSnips Settings(End) -----------------------------------------------------

" Startify Settings -----------------------------------------------------------
" let g:startify_list_order = [ 'files', 'bookmarks', 'dir', 'commands', 'sessions' ]
  let g:startify_lists = [
        \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
        \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
        \ { 'type': 'commands',  'header': ['   Commands']       },
        \ { 'type': 'files',     'header': ['   MRU']            },
        \ { 'type': 'sessions',  'header': ['   Sessions']       },
        \ ]
  let g:startify_commands = [
          \ {'b': ['Broot File Manager', 'FloatermNew broot']},
          \ {'r': ['Ranger File Manager', 'FloatermNew ranger']},
          \ {'g': ['Lazygit Viewer', 'FloatermNew lazygit']},
          \ {'t': ['Launch Shell', 'FloatermNew']},
          \ {'pi': ['Install Plugins', 'PlugInstall']},
          \ {'pc': ['Clean Plugins', 'PlugClean']},
          \ {'pu': ['Update Plugins', 'PlugUpdate']},
          \ ]
  let g:startify_session_autoload = 0
  let g:startify_change_to_vcs_root = 1
  let g:startify_change_to_dir = 0
  let g:startify_relative_path = 1
  let g:startify_change_cmd = 'cd'
  let g:startify_bookmarks = [{{ project_paths_startify }}]
" Startify Settings(End) ------------------------------------------------------

" Vista Settings --------------------------------------------------------------
  let g:vista_default_executive = 'coc'
  function! NearestMethodOrFunction() abort
    return get(b:, 'vista_nearest_method_or_function', '')
  endfunction
  set statusline+=%{NearestMethodOrFunction()}
  autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
" nnoremap <silent> <C-_> :Vista finder lcn<CR>
  nmap <Leader>v [vista-p]
  xmap <Leader>v [vista-p]
  nnoremap <silent> [vista-p]v :Vista<CR>
  nnoremap <silent> [vista-p]c :Vista!<CR>
  nnoremap <silent> [vista-p]t :Vista!!<CR>
  nnoremap <silent> [vista-p]/ :Vista finder coc<CR>
" Vista Settings(End) ---------------------------------------------------------

" DAP Settings ----------------------------------------------------------------
  nmap <Leader>d [dap-p]
  xmap <Leader>d [dap-p]
  nnoremap <silent> [dap-p]e <Cmd>lua require("dapui").eval()<CR>
  vnoremap <silent> [dap-p]e <Cmd>lua require("dapui").eval()<CR>
" DAP Settings(End) -----------------------------------------------------------

" ALE Settings ----------------------------------------------------------------
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_insert_leave = 0
  let g:ale_lint_on_enter = 0
{{ ale_plugin_settings or "\" No ALE Languages Configured" }}
" ALE Settings(End) -----------------------------------------------------------

" Sneak Settings --------------------------------------------------------------
" let g:sneak#label = 1
" map s <Plug>Sneak_s
" map S <Plug>Sneak_S
" map f <Plug>Sneak_f
" map F <Plug>Sneak_F
" map t <Plug>Sneak_t
" map T <Plug>Sneak_T
" map \ <Plug>Sneak_,
" map <Bslash> <Plug>Sneak_,
" Sneak Settings(End) ---------------------------------------------------------

" Hop Settings ----------------------------------------------------------------
" Hop Settings(End) -----------------------------------------------------------

" Extra Plugin Settings -------------------------------------------------------
{{ extra_plugin_settings_file or "\" No Extra Language Plugins Configured" }}
" Extra Plugin Settings(End) --------------------------------------------------
